{"version":3,"sources":["HollyHarnackResume.pdf","sidebar.js","footer.js","pages/home.js","pages/contact.js","pages/projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","className","style","height","href","pdf","React","Component","Footer","Home","Contact","Project","App","Container","fluid","Row","Col","md","sm","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,gD,+MC2B5BC,E,uKAnBP,OACI,yBAAKC,UAAU,6BACX,yBAAKC,MAAO,CAAEC,OAAQ,QAAUF,UAAU,qDACtC,yBAAKA,UAAU,mCACX,uBAAGG,KAAK,SAASH,UAAU,iCAA3B,YACA,uBAAGG,KAAK,QAAQH,UAAU,iCAA1B,YACA,uBAAGG,KAAK,WAAWH,UAAU,iCAA7B,eAEJ,yBAAKA,UAAU,oBAAmB,uBAAGG,KAAMC,IAAKJ,UAAU,gBAAxB,WAClC,yBAAKA,UAAU,oBAAmB,uBAAGG,KAAK,+BAA+BH,UAAU,gBAAjD,WAClC,yBAAKA,UAAU,oBAAmB,uBAAGG,KAAK,4CAA4CH,UAAU,gBAA9D,mB,GAdhCK,IAAMC,WCYbC,E,uKAVP,OACI,kC,GALSF,IAAMC,WCcZE,E,uKAVP,OACI,yBAAKR,UAAU,QAAf,gB,GALOK,IAAMC,WCcVG,E,uKAVP,OACI,yBAAKT,UAAU,QAAf,e,GALUK,IAAMC,WCcbI,E,uKAVP,OACI,yBAAKV,UAAU,QAAf,e,GALUK,IAAMC,W,uDCSPK,E,uKAGjB,OACE,6BACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACb,UAAU,QACzB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAGjB,UAAU,QAC1B,kBAAC,EAAD,OAEF,kBAACe,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACd,kBAAC,IAAD,CAAkBC,GAAI,SACpB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAkBA,GAAI,QACpB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAkBA,GAAI,WACpB,kBAAC,EAAD,OAEF,kBAAC,EAAD,c,GApBqBb,IAAMC,WCCnBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5b40ebf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HollyHarnackResume.13a73b1c.pdf\";","import React from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport pdf from '../src/HollyHarnackResume.pdf';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"sidebar d-none d-md-block\">\r\n                <div style={{ height: \"100%\" }} className=\"d-flex flex-column align-items-start bd-highlight\">\r\n                    <div className=\"mb-auto pt-4 d-flex flex-column\">\r\n                        <a href=\"#about\" className=\"p-2 bd-highlight sidebar-item\">About Me</a>\r\n                        <a href=\"#proj\" className=\"p-2 bd-highlight sidebar-item\">Projects</a>\r\n                        <a href=\"#contact\" className=\"p-2 bd-highlight sidebar-item\">Contact Me</a>\r\n                    </div>\r\n                    <div className=\"p-2 bd-highlight\"><a href={pdf} className=\"sidebar-item\">Resume</a></div>\r\n                    <div className=\"p-2 bd-highlight\"><a href=\"https://github.com/hharnack/\" className=\"sidebar-item\">Github</a></div>\r\n                    <div className=\"p-2 bd-highlight\"><a href=\"https://www.linkedin.com/in/hollyharnack/\" className=\"sidebar-item\">LinkedIn</a></div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Sidebar;\r\n\r\n","import React from 'react';\r\n\r\nclass Footer extends React.Component{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;","import React from'react';\r\n\r\nclass Home extends React.Component{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"page\">\r\n               About Me\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from'react';\r\n\r\nclass Contact extends React.Component{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"page\">\r\n                Contact\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","import React from'react';\r\n\r\nclass Project extends React.Component{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"page\">\r\n               Project \r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Project;","import React from 'react';\r\nimport Sidebar from './sidebar';\r\nimport Footer from './footer';\r\nimport Home from './pages/home';\r\nimport Contact from './pages/contact';\r\nimport Projects from './pages/projects';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport ScrollableAnchor from 'react-scrollable-anchor'\r\n\r\nexport default class App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Container fluid className=\"pl-0\">\r\n        <Row>\r\n          <Col md=\"2\" sm=\"3\"className=\"pr-0\">\r\n            <Sidebar />\r\n          </Col>\r\n          <Col md=\"10\" sm=\"9\">\r\n            <ScrollableAnchor id={'about'}>\r\n              <Home />\r\n            </ScrollableAnchor>\r\n            <ScrollableAnchor id={'proj'}>\r\n              <Projects />\r\n            </ScrollableAnchor>\r\n            <ScrollableAnchor id={'contact'}>\r\n              <Contact />\r\n            </ScrollableAnchor>\r\n            <Footer />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}